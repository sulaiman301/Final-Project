import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import seaborn as sns
from prophet import Prophet
from statsmodels.tsa.seasonal import seasonal_decompose
from scipy import stats

# Function to load data
def load_data(file_path):
    df = pd.read_csv(file_path)
    df['Date'] = pd.to_datetime(df['Date'])
    df['Volume'] = df['Volume'].astype(float)
    return df

# Function to display basic data info
def display_data_info(df):
    print("First few rows:\n", df.head())
    print("\nLast few rows:\n", df.tail())
    print("\nShape of DataFrame:", df.shape)
    print("\nColumns:\n", df.columns)
    print("\nUnique values count:\n", df.nunique())
    print("\nMissing values count:\n", df.isna().sum())
    print("\nDuplicated values count:\n", df.duplicated().value_counts())

# Function to summarize data
def summarize_data(df):
    print("Summary Statistics:\n", df.describe().style.background_gradient(cmap="cividis"))

# Function to visualize trading attributes distribution
def plot_trading_attributes_distribution(df):
    for y in ["Open", "High", "Volume"]:
        fig = px.histogram(df, x="Date", y=y, color="Symbol",
                           color_discrete_sequence=px.colors.qualitative.Set2,
                           title=f"Total Trading {y} Distribution of Major US Oil Companies")
        fig.update_layout(template="plotly_dark", font=dict(family="PT Sans", size=18))
        fig.show()

# Function to plot volume trend
def plot_volume_trend(df):
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.bar(df["Date"], df["Volume"])
    ax.xaxis.set_major_locator(plt.MaxNLocator(15))
    ax.set_xlabel("Date", fontsize=5)
    ax.set_ylabel("Volume", fontsize=5)
    plt.title('Volume Trend', fontsize=20)
    plt.grid()
    plt.show()

# Function to compute and plot moving averages
def plot_moving_averages(df):
    df["MA for 20 days"] = df["Open"].rolling(20).mean()
    df["MA for 50 days"] = df["Open"].rolling(50).mean()
    df.truncate(before="2010-01-01", after="2022-06-10")[["Close", "MA for 20 days", "MA for 50 days"]].plot(subplots=False, figsize=(12, 6), linewidth=2)
    plt.grid()
    plt.show()

# Function to plot distribution of opening prices
def plot_opening_prices_distribution(df):
    sns.distplot(df["Open"], color="#FFD500")
    plt.title("Distribution of open prices of US Oil and Gas stocks", fontweight="bold", fontsize=20)
    plt.xlabel("Open Price", fontsize=10)
    plt.show()

# Function to plot correlation matrix
def plot_correlation_matrix(df):
    corr_matrix = df.corr()
    plt.figure(figsize=(10, 8))
    sns.heatmap(corr_matrix, annot=True, cmap="coolwarm", linewidths=0.5)
    plt.title("Correlation Matrix of Stock Attributes", fontsize=18)
    plt.show()

# Function to decompose time series data
def decompose_time_series(df):
    decomposed = seasonal_decompose(df['Close'], model='multiplicative', period=365)
    decomposed.plot()
    plt.suptitle('Time Series Decomposition of Close Price', fontsize=18)
    plt.show()

# Function to plot closing price trends
def plot_closing_price_trends(df):
    fig = px.line(df, x="Date", y="Close", color="Symbol", title="Closing Price Trends of Major US Oil Companies")
    fig.update_layout(template="plotly_dark", font=dict(family="PT Sans", size=18))
    fig.show()

# Function to plot volatility comparison
def plot_volatility_comparison(df):
    plt.figure(figsize=(12, 6))
    sns.boxplot(x="Symbol", y="Close", data=df)
    plt.title("Volatility Comparison of Closing Prices", fontsize=18)
    plt.show()

# Function to detect and visualize outliers
def detect_and_visualize_outliers(df):
    plt.figure(figsize=(12, 6))
    sns.boxplot(data=df[['Open', 'High', 'Low', 'Close', 'Volume']])
    plt.title('Outlier Detection in Stock Attributes', fontsize=18)
    plt.show()

    z_scores = np.abs(stats.zscore(df[['Open', 'High', 'Low', 'Close', 'Volume']]))
    outliers = np.where(z_scores > 3)
    print(f"Outliers Detected:\n{outliers}")

# Function to create and fit Prophet model
def create_prophet_model(df):
    df.rename(columns={'Date': 'ds', 'Volume': 'y'}, inplace=True)
    df['ds'] = pd.to_datetime(df['ds'])
    df['y'] = pd.to_numeric(df['y'], errors='coerce')
    df.dropna(inplace=True)

    m = Prophet()
    m.fit(df)

    future = m.make_future_dataframe(periods=365)
    forecast = m.predict(future)

    m.plot(forecast)
    m.plot_components(forecast)
